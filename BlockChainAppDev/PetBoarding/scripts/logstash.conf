# 宠物寄养系统Logstash配置文件

input {
  # 从Filebeat收集日志
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # 直接从TCP端口收集日志（用于直接发送日志到Logstash）
  tcp {
    port => 5000
    codec => json
  }
  
  # 从Kafka收集日志（未来扩展）
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => ["application-logs"]
    codec => json
    consumer_threads => 3
    decorate_events => true
    group_id => "logstash"
  }
}

filter {
  # 解析JSON格式的日志
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # 添加时间戳
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
    target => "@timestamp"
  }
  
  # 根据服务名称分类
  if [service_name] {
    mutate {
      add_field => { "[@metadata][index_name]" => "petboarding-%{service_name}-%{+YYYY.MM.dd}" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][index_name]" => "petboarding-logs-%{+YYYY.MM.dd}" }
    }
  }
  
  # 解析用户服务日志
  if [service_name] == "user-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析宠物服务日志
  if [service_name] == "pet-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析寄养服务日志
  if [service_name] == "boarding-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析评价服务日志
  if [service_name] == "review-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析通知服务日志
  if [service_name] == "notification-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析管理员服务日志
  if [service_name] == "admin-service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # 解析API网关日志
  if [service_name] == "api-gateway" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
    
    # 解析HTTP请求信息
    if [log_message] =~ /HTTP/ {
      grok {
        match => { "log_message" => "%{WORD:http_method} %{URIPATHPARAM:http_path} %{NUMBER:http_status:int} %{NUMBER:response_time:float}ms" }
      }
    }
  }
  
  # 根据日志级别添加标签
  if [log_level] == "ERROR" or [log_level] == "FATAL" {
    mutate {
      add_tag => ["error"]
    }
  }
  
  # 删除不必要的字段
  mutate {
    remove_field => ["@version", "beat"]
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_name]}"
    document_type => "_doc"
    manage_template => false
  }
  
  # 输出错误日志到单独的索引
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "petboarding-errors-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 输出到控制台（调试用）
  # stdout { codec => rubydebug }
}